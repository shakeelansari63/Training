{"version":3,"sources":["components/Button.js","components/Header.js","components/Tasks.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","className","style","backgroundColor","defaultProps","Header","props","title","console","log","tasks","id","day","reminder","Tasks","map","task","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAIMA,EAAS,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAC1B,OACI,wBAAQC,UAAU,MACdC,MAAO,CAAEC,gBAAiBL,GAC1BE,QAASA,EAFb,SAGSD,KAMjBF,EAAOO,aAAe,CAClBN,MAAO,aAWID,QCnBTQ,EAAS,SAACC,GAOZ,OACI,yBAAQL,UAAU,SAAlB,UACI,6BAAKK,EAAMC,QAKX,cAAC,EAAD,CAAQT,MAAM,QAAQC,KAAK,MAAMC,QAZrB,WAChBQ,QAAQC,IAAI,6BAiBpBJ,EAAOD,aAAe,CAClBG,MAAO,gBASIF,QCrCTK,EAAQ,CACV,CACIC,GAAI,EACJZ,KAAM,eACNa,IAAK,oBACLC,UAAU,GAEd,CACIF,GAAI,EACJZ,KAAM,mBACNa,IAAK,mBACLC,UAAU,GAEd,CACIF,GAAI,EACJZ,KAAM,gBACNa,IAAK,mBACLC,UAAU,IAgBHC,EAXD,WACV,OAII,aAHA,CAGA,qBACMJ,EAAMK,KAAK,SAACC,GAAD,OAAW,6BAAmBA,EAAKjB,MAAfiB,EAAKL,UCTnCM,MAff,WACE,OACE,sBAAKhB,UAAU,YAAf,UAKE,cAAC,EAAD,IAGA,cAAC,EAAD,QCHSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.203c601d.chunk.js","sourcesContent":["// Import proptype for define type of each prop to make app robust\nimport PropTypes from 'prop-types'\n// While accepting Props, we can also destruct them \n// so that we know what is coming in props\nconst Button = ({color, text, onClick}) => {\n    return (\n        <button className='btn' \n            style={{ backgroundColor: color }}\n            onClick={onClick}>\n                {text}\n        </button>\n    );\n}\n\n// lets define Default props\nButton.defaultProps = {\n    color: 'steelblue'\n}\n\n// Types of each prop\nButton.propTypes = {\n    color: PropTypes.string,\n    text: PropTypes.string,\n    onClick: PropTypes.func\n}\n\n// lets define type of each prop\nexport default Button","//This is Header object \n// Header objects can either have class of function, we will use fuction\n\nimport Button from \"./Button\"\n\n// Js objects can accept parameters in form of props. \n// For example we can define title='XYZ' in Appjs for Header like \n// <Header title='hello World'/>, to in order to catch the title, use props\nconst Header = (props) => {\n\n    const clickButton = () => {\n        console.log('Button Clicked !!!')\n    }\n\n    // return JSX Object\n    return (\n        <header className='header'>\n            <h1>{props.title}</h1>\n            {/** Instead of using button we can have re-usable button component\n             * And We can pass props to customise them\n             * <button className='btn'>Add</button>\n             */}\n            <Button color='green' text='Add' onClick={clickButton}/>\n        </header>\n    );\n}\n\n// But if prop is not pssed in, we can have default props to use\nHeader.defaultProps = {\n    title: 'Task Tracker'\n}\n\n// We can also have dynamic styling for every object\n// const headerStyle = {\n//     color: 'red',\n//     backgroundColor: 'black'\n// }\n\nexport default Header","// Here is a Dummy task for us to work with\nconst tasks = [\n    {\n        id: 1,\n        text: 'Go to School',\n        day: 'May 30 2021 12 PM',\n        reminder: true,\n    },\n    {\n        id: 2,\n        text: 'Search Breakfast',\n        day: 'May 31 2021 7 AM',\n        reminder: true,\n    },\n    {\n        id: 3,\n        text: 'Food Shopping',\n        day: 'June 1 2021 5 PM',\n        reminder: false,\n    },\n\n]\n\nconst Tasks = () => {\n    return(\n        // if we want to return multiple objects without parent, we can \n        // put it in empty tag\n        // It is mandatory to give unique key prop if returning list\n        <>\n            { tasks.map( (task) => (<h4 key={task.id}>{task.text}</h4>))}\n        </>\n    );\n}\n\nexport default Tasks","// Import Header Object from components\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\n\n// This is main app which is embedded in \nfunction App() {\n  return (\n    <div className=\"container\">\n      {/* This is JSX object and it does not support either JS or HTML comments\n      Here comments are stored inside {} */}\n      {/* <h1>Hello From React</h1> \n      Lets Put the Header tag to call Header object*/}\n      <Header />\n\n      {/** Display tasks */}\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}